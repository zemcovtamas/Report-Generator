/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.dolphio.tprttapi.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import hu.dolphio.tprttapi.model.tp.Assignable;
import hu.dolphio.tprttapi.model.tp.Time;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.AuthCache;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.BasicAuthCache;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import hu.dolphio.tprttapi.model.rtt.ReportElementTO;
import hu.dolphio.tprttapi.util.HttpResponseStatus;
import hu.dolphio.tprttapi.util.PropertyReader;
import java.io.ByteArrayInputStream;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.http.entity.InputStreamEntity;

/**
 *
 * @author david
 */
public class TrackingFlushServiceTpImpl implements TrackingFlushService {

    private final HttpHost targetHost;
    private final HttpClientContext clientContext = HttpClientContext.create();
    private final CredentialsProvider credsProvider;
    private final String dateFrom;
    private final String dateTo;
    private final Map<Integer, Assignable> assignableMap = new HashMap<>();
    private final static Logger LOG = LogManager.getLogger(TrackingFlushServiceTpImpl.class.getName());
    private final RequestConfig config;
    private final PropertyReader propertyReader = PropertyReader.getInstance();

    public TrackingFlushServiceTpImpl(String dateFrom, String dateTo) {
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;

        targetHost = new HttpHost(propertyReader.getTpHost(), 80, "http");
        credsProvider = new BasicCredentialsProvider();
        Credentials credentials = new UsernamePasswordCredentials(propertyReader.getTpUserName(), propertyReader.getTpPassword());
        credsProvider.setCredentials(new AuthScope(targetHost.getHostName(), targetHost.getPort()), credentials);
        config = RequestConfig.custom()
                .setSocketTimeout(propertyReader.getConnectionTimeout())
                .setConnectTimeout(propertyReader.getConnectionTimeout())
                .build();

        AuthCache authCache = new BasicAuthCache();

        BasicScheme basicAuth = new BasicScheme();
        authCache.put(targetHost, basicAuth);

        clientContext.setAuthCache(authCache);
    }

    @Override
    public void deleteTrackings(Collection<ReportElementTO> trackings) throws IOException {
        Map<String, Integer> uniqueProjects = new HashMap<>();
        for (ReportElementTO tracking : trackings) {
            if (tracking.getTicketId() == null || tracking.getTicketId().isEmpty() || uniqueProjects.containsKey(tracking.getTicketId())) {
                continue;
            }
            uniqueProjects.put(tracking.getTicketId(), tracking.getProject().getId());
        }

        List<Time> timesToDelete = new ArrayList<>();
        for (String assignable : uniqueProjects.keySet()) {
            CloseableHttpClient httpclient = HttpClients.custom()
                    .setDefaultRequestConfig(config)
                    .setDefaultCredentialsProvider(credsProvider).build();

            try {
                StringBuilder urlBuilder = new StringBuilder()
                        .append("/api/v1/Times?include=[Id]&format=json&where=(Date%20gte%20%27")
                        .append(dateFrom)
                        .append("%27)%20and%20(Date%20lte%20%27")
                        .append(dateTo)
                        .append("%27)%20and%20(Assignable.Id%20eq%20%27")
                        .append(assignable)
                        .append("%27)");
                
                HttpGet httpGet = new HttpGet(urlBuilder.toString());

                CloseableHttpResponse execute = httpclient.execute(targetHost, httpGet, clientContext);
                String timesJson = IOUtils.toString(execute.getEntity().getContent(), "utf-8");
                LOG.info("Search for TP times return: " + execute);
                httpclient.close();

                Map<String, Collection<Time>> times = new ObjectMapper().readValue(timesJson, new TypeReference<Map<String, Collection<Time>>>() {
                });
                timesToDelete.addAll(times.get("Items"));
            } catch (IOException ex) {
                LOG.warn(ex.getMessage(), ex);
            }
        }

        for (Time time : timesToDelete) {
            CloseableHttpClient httpclient = HttpClients.custom()
                    .setDefaultRequestConfig(config)
                    .setDefaultCredentialsProvider(credsProvider).build();

            try {
                String postUri = "/api/v1/Times/" + time.getTimeID();
                HttpDelete httpDelete = new HttpDelete(postUri);

                CloseableHttpResponse execute = httpclient.execute(targetHost, httpDelete, clientContext);
                LOG.info("TP time delete return: " + execute);
                httpclient.close();

            } catch (IOException ex) {
                LOG.warn(ex.getMessage(), ex);
            }
        }

    }

    @Override
    public void insertTrackings(Collection<ReportElementTO> trackings) throws IOException {
        for (ReportElementTO tracking : trackings) {
            LOG.trace("Processing tracking: " + tracking.getTrackingId());
            if (StringUtils.isBlank(tracking.getTicketId()) || !NumberUtils.isNumber(tracking.getTicketId())) {
                LOG.warn("Skipping tracking:" + tracking.getTrackingId() + " bc ticketId is not a valid number: " + tracking.getTicketId());
                continue;
            }
            CloseableHttpClient httpclient = HttpClients.custom()
                    .setDefaultRequestConfig(config)
                    .setDefaultCredentialsProvider(credsProvider).build();

            try {
                String postUri = "/api/v1/Times?resultFormat=json&resultInclude=[Description,Project,Assignable,Spent]";
                HttpPost httpPost = new HttpPost(postUri);
                httpPost.setHeader("Content-Type", "application/json; charset=utf-8");

                Assignable assignable = getAssignableFromTp(Integer.parseInt(tracking.getTicketId()));
                if (assignable == null) {
                    continue;
                }
                double remainTime = assignable.getEffort() - assignable.getSpentTime() - tracking.getTime().getHours();
                assignable.setEffort(remainTime < 0 ? 0 : remainTime);

                StringBuilder description = new StringBuilder()
                        .append((tracking.getUser().getName() != null ? (tracking.getUser().getName()) : ""))
                        .append((tracking.getRole() != null ? " @" + tracking.getRole().getAbbreviation() : ""))
                        .append(tracking.getCategory() != null ? " +" + tracking.getCategory().getAbbreviation() : "")
                        .append(" [")
                        .append(tracking.getTrackingId())
                        .append("] ");
                
                Time time = new Time(description.toString(), assignable.getProject().getId(), Integer.parseInt(tracking.getTicketId()), tracking.getTime().getHours(), assignable.getEffort(), tracking.getTime().getDate());

                if (time.getProjectId() == null) {
                    continue;
                }
                LOG.trace(time);

                httpPost.setEntity(new InputStreamEntity(new ByteArrayInputStream(time.toString().getBytes("UTF-8"))));
                CloseableHttpResponse execute = httpclient.execute(targetHost, httpPost, clientContext);
                LOG.info("TP insert return: " + execute);
                httpclient.close();

            } catch (IOException ex) {
                LOG.warn(ex.getMessage(), ex);
            }
        }
    }

    private Assignable getAssignableFromTp(Integer assignableId) throws IOException {
        if (assignableMap.containsKey(assignableId)) {
            return assignableMap.get(assignableId);
        }
        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setDefaultCredentialsProvider(credsProvider).build();

        LOG.info("Trying to get assignable: " + assignableId);
        String getUri = "/api/v1/Assignables/" + assignableId + "?include=[Id,TimeSpent,Effort,Project[Id,Name]]&format=json";
        HttpGet httpGet = new HttpGet(getUri);
        CloseableHttpResponse execute = httpclient.execute(targetHost, httpGet, clientContext);
        LOG.info("TP assignable download response: " + execute);
        if (HttpResponseStatus.getStatusByCode(execute.getStatusLine().getStatusCode()) != HttpResponseStatus.SUCCESS) {
            LOG.warn("[" + execute.getStatusLine().getStatusCode() + "] Downloading Assignable information from TargetProcess failed!");
            return null;
        }
        String projectsJson = IOUtils.toString(execute.getEntity().getContent(), "utf-8");
        httpclient.close();

        Assignable assignable = new ObjectMapper().readValue(projectsJson, Assignable.class);

        if (!assignableMap.containsKey(assignable.getAssignableId())) {
            assignableMap.put(assignable.getAssignableId(), assignable);
            return assignable;
        }
        return null;
    }
}
